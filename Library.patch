diff -Naur Library_orig/lib/python3.7/site-packages/IPython/core/interactiveshell.py Library/lib/python3.7/site-packages/IPython/core/interactiveshell.py
--- Library_orig/lib/python3.7/site-packages/IPython/core/interactiveshell.py	2019-02-12 12:41:30.000000000 +0100
+++ Library/lib/python3.7/site-packages/IPython/core/interactiveshell.py	2019-03-11 11:01:39.000000000 +0100
@@ -2465,8 +2465,38 @@
         # but raising SystemExit(_exit_code) will give status 254!
         self.user_ns['_exit_code'] = ec
 
+    def system_ios(self, cmd):
+        """Call the given cmd in a subprocess using system on iOS and output 
+        the result on stdout / stderr as needed. 
+
+        Parameters
+        ----------
+        cmd : str
+          Command to execute.
+        """
+        cmd = self.var_expand(cmd, depth=1)
+        # sys.stdout.fileno, sys.stderr.fileno do not exist
+        p = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
+        out = p.stdout.read()
+        err = p.stderr.read()
+        retcode = p.poll()
+        # out tends to include starging/trailing newlines, so we remove them:
+        if (err): 
+            print(err.strip('\n').decode('UTF-8'), file = sys.stderr)
+        if (out): 
+            print(out.strip('\n').decode('UTF-8'))
+
+        if retcode is not None: 
+            if retcode > 128:
+                retcode = -(retcode - 128)
+            self.user_ns['_exit_code'] = retcode 
+        else:
+            self.user_ns['_exit_code'] = 0
+
     # use piped system by default, because it is better behaved
-    system = system_piped
+    # system = system_piped
+    # iOS: use system_ios instead
+    system = system_ios
 
     def getoutput(self, cmd, split=True, depth=0):
         """Get output (possibly including stderr) from a subprocess.
diff -Naur Library_orig/lib/python3.7/site-packages/IPython/utils/_process_posix.py Library/lib/python3.7/site-packages/IPython/utils/_process_posix.py
--- Library_orig/lib/python3.7/site-packages/IPython/utils/_process_posix.py	2019-02-12 12:41:30.000000000 +0100
+++ Library/lib/python3.7/site-packages/IPython/utils/_process_posix.py	2019-03-11 10:24:27.000000000 +0100
@@ -151,9 +151,13 @@
             # the text itself.
             #child = pexpect.spawn(pcmd, searchwindowsize=1)
             if hasattr(pexpect, 'spawnb'):
-                child = pexpect.spawnb(self.sh, args=['-c', cmd]) # Pexpect-U
+                # child = pexpect.spawnb(self.sh, args=['-c', cmd]) # Pexpect-U
+                # iOS: don't add "sh -c" in front of command
+                child = pexpect.spawnb(cmd) # Pexpect-U
             else:
-                child = pexpect.spawn(self.sh, args=['-c', cmd])  # Vanilla Pexpect
+                # child = pexpect.spawn(self.sh, args=['-c', cmd])  # Vanilla Pexpect
+                # iOS: don't add "sh -c" in front of command
+                child = pexpect.spawn(cmd)  # Vanilla Pexpect
             flush = sys.stdout.flush
             while True:
                 # res is the index of the pattern that caused the match, so we
diff -Naur Library_orig/lib/python3.7/site-packages/jupyter_client/kernelspec.py Library/lib/python3.7/site-packages/jupyter_client/kernelspec.py
--- Library_orig/lib/python3.7/site-packages/jupyter_client/kernelspec.py	2019-02-12 12:41:30.000000000 +0100
+++ Library/lib/python3.7/site-packages/jupyter_client/kernelspec.py	2019-02-25 12:24:20.000000000 +0100
@@ -32,7 +32,9 @@
     env = Dict()
     resource_dir = Unicode()
     interrupt_mode = CaselessStrEnum(
-        ['message', 'signal'], default_value='signal'
+# iOS: signal could result in strange side effects.
+#       ['message', 'signal'], default_value='signal'
+        ['message', 'signal'], default_value='message'
     )
     metadata = Dict()
 
diff -Naur Library_orig/lib/python3.7/site-packages/jupyter_client/manager.py Library/lib/python3.7/site-packages/jupyter_client/manager.py
--- Library_orig/lib/python3.7/site-packages/jupyter_client/manager.py	2019-02-12 12:41:30.000000000 +0100
+++ Library/lib/python3.7/site-packages/jupyter_client/manager.py	2019-02-26 22:06:23.000000000 +0100
@@ -317,14 +317,16 @@
         # Stop monitoring for restarting while we shutdown.
         self.stop_restarter()
 
-        if now:
-            self._kill_kernel()
-        else:
-            self.request_shutdown(restart=restart)
+        # iOS: _kill_kernel results in unclean memory
+        # if now:
+        #     self._kill_kernel()
+        # else:
+        self.request_shutdown(restart=restart)
             # Don't send any additional kernel kill messages immediately, to give
             # the kernel a chance to properly execute shutdown actions. Wait for at
             # most 1s, checking every 0.1s.
-            self.finish_shutdown()
+        self.finish_shutdown()
+        # endif # if not iOS
 
         self.cleanup(connection_file=not restart)
 
diff -Naur Library_orig/lib/python3.7/site-packages/matplotlib-3.0.2-py3.7.egg/matplotlib/font_manager.py Library/lib/python3.7/site-packages/matplotlib-3.0.2-py3.7.egg/matplotlib/font_manager.py
--- Library_orig/lib/python3.7/site-packages/matplotlib-3.0.2-py3.7.egg/matplotlib/font_manager.py	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/matplotlib-3.0.2-py3.7.egg/matplotlib/font_manager.py	2019-03-06 08:03:31.000000000 +0100
@@ -268,7 +268,8 @@
             fontfiles.update(win32InstalledFonts(fontext=fontext))
         else:
             fontpaths = X11FontDirectories
-            fontfiles.update(get_fontconfig_fonts(fontext))
+            # iOS: this call doesn't do anything
+            # fontfiles.update(get_fontconfig_fonts(fontext))
             # check for OS X & load its fonts if present
             if sys.platform == 'darwin':
                 fontfiles.update(OSXInstalledFonts(fontext=fontext))
diff -Naur Library_orig/lib/python3.7/site-packages/notebook/static/edit/js/main.min.js Library/lib/python3.7/site-packages/notebook/static/edit/js/main.min.js
--- Library_orig/lib/python3.7/site-packages/notebook/static/edit/js/main.min.js	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/notebook/static/edit/js/main.min.js	2019-03-08 15:40:18.000000000 +0100
@@ -35216,17 +35216,22 @@
         
         //  File
         this.element.find('#new-file').click(function () {
-            var w = window.open(undefined, IPython._target);
+        	// iOS, Carnets: don't open a window until you know the URL
+            // var w = window.open(undefined, IPython._target);
             // Create a new file in the current directory
             var parent = utils.url_path_split(editor.file_path)[0];
             editor.contents.new_untitled(parent, {type: "file"}).then(
                 function (data) {
-                    w.location = utils.url_path_join(
-                        that.base_url, 'edit', utils.encode_uri_components(data.path)
+                    // w.location = utils.url_path_join(
+                    //     that.base_url, 'edit', utils.encode_uri_components(data.path)
+                    // );
+                    var w = window.open(utils.url_path_join(
+                        that.base_url, 'edit', utils.encode_uri_components(data.path))
                     );
                 },
                 function(error) {
-                    w.close();
+                    // w.close();
+                    window.webkit.messageHandlers.Carnets.postMessage("exception:new-fileFailed"); 
                     dialog.modal({
                         title : 'Creating New File Failed',
                         body : "The error was: " + error.message,
@@ -36564,8 +36569,17 @@
     editor.load();
     page.show();
 
+	// iOS: "focusout" event is called when we leave the page or go into background
+	window.onfocusout = function () {
+		// This is not perfect, but it saves the edits if we go to background.
+		editor.save();
+		return;
+	}
+
     window.onbeforeunload = function () {
-        if (editor.save_enabled && !editor.codemirror.isClean(editor.generation)) {
+		// iOS note: onbeforeunload is not called with WkWebView or Safari. 
+		// We use focusout events instead.
+		if (editor.save_enabled && !editor.codemirror.isClean(editor.generation)) {
             return "Unsaved changes will be lost. Close anyway?";
         }
     };
@@ -36587,4 +36601,4 @@
 define("edit/js/main", function(){});
 
 
-//# sourceMappingURL=main.min.js.map
\ No newline at end of file
+//# sourceMappingURL=main.min.js.map
diff -Naur Library_orig/lib/python3.7/site-packages/notebook/static/notebook/js/main.min.js Library/lib/python3.7/site-packages/notebook/static/notebook/js/main.min.js
--- Library_orig/lib/python3.7/site-packages/notebook/static/notebook/js/main.min.js	2019-02-12 12:41:32.000000000 +0100
+++ Library/lib/python3.7/site-packages/notebook/static/notebook/js/main.min.js	2019-03-08 15:40:20.000000000 +0100
@@ -38320,6 +38320,8 @@
             this.kernel._kernel_dead();
         }
 
+		/* iOS: send notice to Carnets that this kernel is killed */
+        window.webkit.messageHandlers.Carnets.postMessage("killingSession:" + this.session_url)
         utils.ajax(this.session_url, {
             processData: false,
             cache: false,
@@ -38389,6 +38391,8 @@
         if (data && data.id) {
             this.id = data.id;
             this.session_url = utils.url_path_join(this.session_service_url, this.id);
+            /* iOS: send notice to Carnets that this kernel is created */
+			window.webkit.messageHandlers.Carnets.postMessage("loadingSession:" + this.session_url)
         }
         if (data && data.notebook) {
             this.notebook_model.path = data.path;
@@ -42743,10 +42747,19 @@
             expand_time(time);
         });
 
+		// iOS: "focusout" event is called when we leave the page or go into background
+		window.onfocusout = function () {
+			if (that.dirty) {
+				that.save_notebook();
+			}
+			return;
+		}
 
         // Firefox 22 broke $(window).on("beforeunload")
         // I'm not sure why or how.
         window.onbeforeunload = function () {
+            // iOS note: onbeforeunload is not called with WkWebView or Safari. 
+            // We use focusout events instead.
             // TODO: Make killing the kernel configurable.
             var kill_kernel = false;
             if (kill_kernel) {
@@ -45053,12 +45066,14 @@
 
         var error;
         if (!this._fully_loaded) {
-            error = new Error("Load failed, save is disabled");
+            errfocusoutor = new Error("Load failed, save is disabled");
             this.events.trigger('notebook_save_failed.Notebook', error);
+			window.webkit.messageHandlers.Carnets.postMessage("notebook_save_failed.Notebook: Load failed, save is disabled");
             return Promise.reject(error);
         } else if (!this.writable) {
             error = new Error("Notebook is read-only");
             this.events.trigger('notebook_save_failed.Notebook', error);
+			window.webkit.messageHandlers.Carnets.postMessage("notebook_save_failed.Notebook: Notebook is read-only");
             return Promise.reject(error);
         }
 
@@ -45079,6 +45094,7 @@
             return that.contents.save(that.notebook_path, model).then(
                 $.proxy(that.save_notebook_success, that, start),
                 function (error) {
+					window.webkit.messageHandlers.Carnets.postMessage("notebook_save_failed.Notebook: " + error.message);
                     that.events.trigger('notebook_save_failed.Notebook', error);
                 }
             );
@@ -45094,6 +45110,8 @@
                     // so we allow 0.5 seconds difference before complaining.
                     // This is configurable in nbconfig/notebook.json as `last_modified_check_margin`.
                     if ((last_modified.getTime() - that.last_modified.getTime()) > last_modified_check_margin) {  
+						window.webkit.messageHandlers.Carnets.postMessage("Last saving was done on `"+that.last_modified+"`("+that._last_modified+"), "+
+                                    "while the current file seem to have been saved on `"+data.last_modified+"`");
                         console.warn("Last saving was done on `"+that.last_modified+"`("+that._last_modified+"), "+
                                     "while the current file seem to have been saved on `"+data.last_modified+"`");
                         if (that._changed_on_disk_dialog !== null) {
@@ -45134,6 +45152,7 @@
                     }
                 }, function () {
                     // maybe it has been deleted or renamed? Go ahead and save.
+					window.webkit.messageHandlers.Carnets.postMessage("notebook_save: missing notebook on file. Maybe it has been deleted or renamed? Go ahead and save");
                     return _save();
                 }
             );
@@ -45357,7 +45376,8 @@
     Notebook.prototype.copy_notebook = function () {
         var that = this;
         var base_url = this.base_url;
-        var w = window.open('', IPython._target);
+        // iOS, Carnets: don't open a window until you know the URL
+        // var w = window.open('', IPython._target);
         var parent = utils.url_path_split(this.notebook_path)[0];
         var p;
         if (this.dirty && this.writable) {
@@ -45368,12 +45388,17 @@
         return p.then(function () {
             return that.contents.copy(that.notebook_path, parent).then(
                 function (data) {
-                    w.location = utils.url_path_join(
+                	url = utils.url_path_join(
                         base_url, 'notebooks', utils.encode_uri_components(data.path)
                     );
+                    var w = window.open(url);
+                    // w.location = utils.url_path_join(
+                    //    base_url, 'notebooks', utils.encode_uri_components(data.path)
+                    // );
                 },
                 function(error) {
-                    w.close();
+                    // w.close();
+                    window.webkit.messageHandlers.Carnets.postMessage("exception:prototype.copy_notebook"); 
                     that.events.trigger('notebook_copy_failed', error);
                 }
             );
@@ -46774,13 +46799,16 @@
     };
 
     MenuBar.prototype._new_window = function(url) {
-        var w = window.open('', IPython._target);
+        // iOS, Carnets: don't open a window until you know its url
+        // var w = window.open('', IPython._target);
         if (this.notebook.dirty && this.notebook.writable) {
             this.notebook.save_notebook().then(function() {
-                w.location = url;
+                // w.location = url;
+                var w = window.open(url);
             });
         } else {
-            w.location = url;
+            // w.location = url;
+            var w = window.open(url);
         }
     };
     
@@ -49682,8 +49710,8 @@
     };
 
     KernelSelector.prototype.new_notebook = function (kernel_name) {
-        
-        var w = window.open('', IPython._target);
+        // iOS: don't open the window until you know the URL
+        // var w = window.open('', IPython._target);
         // Create a new notebook in the same path as the current
         // notebook's path.
         var that = this;
@@ -49695,10 +49723,12 @@
                     utils.encode_uri_components(data.path)
                 );
                 url += "?kernel_name=" + kernel_name;
-                w.location = url;
+                var w = window.open(url);
+                // w.location = url;
             },
             function(error) {
-                w.close();
+                // w.close();
+                window.webkit.messageHandlers.Carnets.postMessage("exception:prototype.new_notebook"); 
                 dialog.modal({
                     title : i18n.msg._('Creating Notebook Failed'),
                     body : i18n.msg.sprintf(i18n.msg._("The error was: %s"), error.message),
@@ -50591,4 +50621,4 @@
 define("notebook/js/main", function(){});
 
 
-//# sourceMappingURL=main.min.js.map
\ No newline at end of file
+//# sourceMappingURL=main.min.js.map
diff -Naur Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/main.min.js Library/lib/python3.7/site-packages/notebook/static/tree/js/main.min.js
--- Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/main.min.js	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/notebook/static/tree/js/main.min.js	2019-03-06 11:34:19.000000000 +0100
@@ -27877,14 +27877,20 @@
         if (!NotebookList._bound_singletons) {
             NotebookList._bound_singletons = true;
             $('#new-file').click(function(e) {
-                var w = window.open('', IPython._target);
+                // iOS, Carnets: don't open a window until you know the URL
+                // var w = window.open('', IPython._target);
                 that.contents.new_untitled(that.notebook_path || '', {type: 'file', ext: '.txt'}).then(function(data) {
-                    w.location = utils.url_path_join(
+                    var url = utils.url_path_join(
                         that.base_url, 'edit',
-                        utils.encode_uri_components(data.path)
-                    );
+                        utils.encode_uri_components(data.path));
+                    var w = window.open(url);
+                    // w.location = utils.url_path_join(
+                    //     that.base_url, 'edit',
+                    //     utils.encode_uri_components(data.path)
+                    // );
                 }).catch(function (e) {
-                    w.close();
+                    // w.close();
+                    window.webkit.messageHandlers.Carnets.postMessage("exception:fileCreateFailed"); 
                     dialog.modal({
                         title: i18n.msg._('Creating File Failed'),
                         body: $('<div/>')
@@ -28653,6 +28659,8 @@
                 'api/sessions',
                 encodeURIComponent(session.id)
             );
+            /* iOS: send notice to Carnets that this kernel is killed */
+			window.webkit.messageHandlers.Carnets.postMessage("killingSession:" + url)
             utils.ajax(url, settings);
         }
     };
@@ -29508,18 +29516,26 @@
         if (event) {
             event.preventDefault();
         }
-        var w = window.open('#', IPython._target);
+        // iOS, Carnets: don't open a window until you know its URL.
+        // var w = window.open('#', IPython._target);
         var base_url = this.base_url;
         var settings = {
             type : "POST",
             dataType: "json",
             success : function (data, status, xhr) {
                 var name = data.name;
-                w.location = utils.url_path_join(base_url, 'terminals', 
+                // iOS:
+                var urlw = utils.url_path_join(base_url, 'terminals', 
                     utils.encode_uri_components(name));
+                window.webkit.messageHandlers.Carnets.postMessage(urlw); 
+                var w = window.open(urlw);
+                // not iOS:
+                // w.location = utils.url_path_join(base_url, 'terminals', 
+                //    utils.encode_uri_components(name));
             },
             error : function(jqXHR, status, error){
-                w.close();
+                // w.close();
+                window.webkit.messageHandlers.Carnets.postMessage("exception:terminalOpenFailed"); 
                 utils.log_ajax_error(jqXHR, status, error);
             },
         };
@@ -29668,7 +29684,9 @@
         /** create and open a new notebook */
         var that = this;
         kernel_name = kernel_name || this.default_kernel;
-        var w = window.open(undefined, IPython._target);
+		window.webkit.messageHandlers.Carnets.postMessage("new_notebook"); 
+		// iOS: don't open a window until you know the URL
+        // var w = window.open(undefined, IPython._target);
         var dir_path = $('body').attr('data-notebook-path');
         this.contents.new_untitled(dir_path, {type: "notebook"}).then(
             function (data) {
@@ -29679,9 +29697,12 @@
                 if (kernel_name) {
                     url += "?kernel_name=" + kernel_name;
                 }
-                w.location = url;
+                // iOS: we open the webView only once we have the actual URL:
+                var w = window.open(url)
+                // w.location = url;
         }).catch(function (e) {
-            w.close();
+			// w.close();
+			window.webkit.messageHandlers.Carnets.postMessage("exception:NotebookCreationFailed"); 
             // This statement is used simply so that message extraction
             // will pick up the strings.  The actual setting of the text
             // for the button is in dialog.js.
@@ -29723,16 +29744,19 @@
     "use strict";
 
     function display_shutdown_dialog() {
-        var body = $('<div/>').append(
-            $('<p/>').text(i18n.msg._("You have shut down Jupyter. You can now close this tab."))
-        ).append(
-            $('<p/>').text(i18n.msg._("To use Jupyter again, you will need to relaunch it."))
-        );
-
-        dialog.modal({
-            title: i18n.msg._("Server stopped"),
-            body: body
-        })
+    	// iOS: send shutdown message to the main application:
+    	window.webkit.messageHandlers.Carnets.postMessage("quit"); 
+		// iOS: ... and don't show the dialog message:
+        // var body = $('<div/>').append(
+        //     $('<p/>').text(i18n.msg._("You have shut down Jupyter. You can now close this tab."))
+        // ).append(
+        //     $('<p/>').text(i18n.msg._("To use Jupyter again, you will have to relaunch it."))
+        // );
+
+        // dialog.modal({
+        //     title: i18n.msg._("Server stopped"),
+        //     body: body
+        // })
     }
 
     function activate() {
@@ -30014,4 +30038,4 @@
 define("tree/js/main", function(){});
 
 
-//# sourceMappingURL=main.min.js.map
\ No newline at end of file
+//# sourceMappingURL=main.min.js.map
diff -Naur Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/newnotebook.js Library/lib/python3.7/site-packages/notebook/static/tree/js/newnotebook.js
--- Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/newnotebook.js	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/notebook/static/tree/js/newnotebook.js	2019-02-25 08:29:23.000000000 +0100
@@ -89,6 +89,7 @@
                     url += "?kernel_name=" + kernel_name;
                 }
                 w.location = url;
+                window.webkit.messageHandlers.Carnets.postMessage(url);
         }).catch(function (e) {
             w.close();
             // This statement is used simply so that message extraction
diff -Naur Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/shutdownbutton.js Library/lib/python3.7/site-packages/notebook/static/tree/js/shutdownbutton.js
--- Library_orig/lib/python3.7/site-packages/notebook/static/tree/js/shutdownbutton.js	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/notebook/static/tree/js/shutdownbutton.js	2019-01-29 12:23:44.000000000 +0100
@@ -15,6 +15,9 @@
     "use strict";
 
     function display_shutdown_dialog() {
+    	// iOS: send a message to the application:
+    	window.webkit.messageHandlers.Carnets.postMessage("quit");
+    	// otherwise, display a dialog window
         var body = $('<div/>').append(
             $('<p/>').text(i18n.msg._("You have shut down Jupyter. You can now close this tab."))
         ).append(
diff -Naur Library_orig/lib/python3.7/site-packages/pexpect/utils.py Library/lib/python3.7/site-packages/pexpect/utils.py
--- Library_orig/lib/python3.7/site-packages/pexpect/utils.py	2019-02-12 12:41:31.000000000 +0100
+++ Library/lib/python3.7/site-packages/pexpect/utils.py	2019-03-09 21:07:02.000000000 +0100
@@ -4,6 +4,8 @@
 import select
 import time
 import errno
+# iOS: to separate between OSX and iOS (both are 'darwin')
+import platform
 
 try:
     InterruptedError
@@ -49,7 +51,10 @@
     '''This takes a given filename; tries to find it in the environment path;
     then checks if it is executable. This returns the full path to the filename
     if found and executable. Otherwise this returns None.'''
-
+    # iOS: we don't search for execs, ios_system will do. 
+    if (sys.platform == 'darwin') and (platform.machine().startswith('iP')):
+        return filename
+    # 
     # Special case where filename contains an explicit path.
     if os.path.dirname(filename) != '' and is_executable_file(filename):
         return filename
