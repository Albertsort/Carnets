"""Tornado handlers for the live notebook view."""

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

from collections import namedtuple
import os
from tornado import web
HTTPError = web.HTTPError

from ..base.handlers import (
    IPythonHandler, FilesRedirectHandler, path_regex,
)
from ..utils import url_escape
from ..transutils import _


# iOS, helper function (check if latex_env is activated):
# We do this by directly reading the JSON preference file
# import sys
from jupyter_core.paths import jupyter_config_path
from ..config_manager import BaseJSONConfigManager

def check_extension_activated(extension):
    """Check that the latex_envs extension is activated"""
    config_dirs = [os.path.join(p, 'nbconfig') for p in jupyter_config_path()]

    for config_dir in config_dirs:
        head = u'  config dir: {}'.format(config_dir)
        head_shown = False

        cm = BaseJSONConfigManager(config_dir=config_dir)
        data = cm.get('notebook')
        if 'load_extensions' in data:
            for require, enabled in data['load_extensions'].items():
                if (require == extension and enabled): return True
    return False

def get_custom_frontend_exporters():
    from nbconvert.exporters.base import get_export_names, get_exporter

    ExporterInfo = namedtuple('ExporterInfo', ['name', 'display'])

    # iOS: which extensions are activated?
    show_latex_envs = check_extension_activated('latex_envs/latex_envs')
    show_toc = check_extension_activated('toc2/main')
    show_ch = check_extension_activated('collapsible_headings/main')

    for name in sorted(get_export_names()):
        # iOS: get rid of file types already present in the menu:
        # or formats that won't work (custom, selectLanguage, pdf):
        # script should be re-enabled once there are multiple languages
        if ((name == 'pdf') or  (name == 'python') or (name == 'latex') or (name == 'markdown') or (name == 'rst') 
                or (name == 'html') or (name == 'slides') or (name == 'notebook') or (name == 'custom')
                or (name == 'selectLanguage') or (name == 'script')):
            continue
        # Activate menu items depending on extensions being activated:
        if (not show_latex_envs):
            if (name == 'html_with_lenvs' or name == 'html_with_toclenvs' or name == 'latex_with_lenvs' or name == 'slides_with_lenvs'): continue
        if (not show_toc):
            if (name ==  'html_with_toclenvs' or name == 'toc2' or name == 'html_toc'): continue
        if (not show_ch): 
            if (name == 'html_ch'): continue
        exporter = get_exporter(name)()
        
        ux_name = getattr(exporter, 'export_from_notebook', None)
        if ux_name is not None:
            display = _('{} ({})'.format(ux_name, exporter.file_extension))
            yield ExporterInfo(name, display)


class NotebookHandler(IPythonHandler):

    @web.authenticated
    def get(self, path):
        """get renders the notebook template if a name is given, or 
        redirects to the '/files/' handler if the name is not given."""
        path = path.strip('/')
        cm = self.contents_manager
        
        # will raise 404 on not found
        try:
            model = cm.get(path, content=False)
        except web.HTTPError as e:
            if e.status_code == 404 and 'files' in path.split('/'):
                # 404, but '/files/' in URL, let FilesRedirect take care of it
                return FilesRedirectHandler.redirect_to_files(self, path)
            else:
                raise
        if model['type'] != 'notebook':
            # not a notebook, redirect to files
            return FilesRedirectHandler.redirect_to_files(self, path)
        name = path.rsplit('/', 1)[-1]
        self.write(self.render_template('notebook.html',
            notebook_path=path,
            notebook_name=name,
            kill_kernel=False,
            mathjax_url=self.mathjax_url,
            mathjax_config=self.mathjax_config,
            get_custom_frontend_exporters=get_custom_frontend_exporters
            )
        )


#-----------------------------------------------------------------------------
# URL to handler mappings
#-----------------------------------------------------------------------------


default_handlers = [
    (r"/notebooks%s" % path_regex, NotebookHandler),
]

